# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

        #working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      - run:
          name: checking current working directory
          command: |
            pwd
            

      - run:
          name: run virtual environments
          command: |
            python3 -m venv venv
            . venv/bin/activate
      
      - run:
          name: install dependencies
          command: |
            . venv/bin/activate
            pip3 freeze
            python --version
            sudo pip3 install --upgrade pip
            sudo pip3 install Django
            sudo pip3 install django-webtest
            sudo pip3 install psycopg2
            sudo pip3 install pytest
            sudo pip3 install pytest-django
            sudo pip3 install virtualenv
            sudo pip3 install WebTest

            #       pip install -r ../../requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python3 manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
          
